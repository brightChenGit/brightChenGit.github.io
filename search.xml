<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo+rss订阅配置</title>
      <link href="/9a6ba976.html"/>
      <url>/9a6ba976.html</url>
      
        <content type="html"><![CDATA[<h2 id="rss定义"><a href="#rss定义" class="headerlink" title="rss定义"></a>rss定义</h2><p>Atom 1.0和RSS 2.0是两种常见的内容聚合协议，它们允许用户订阅网站的更新内容，无需频繁访问网站即可获取最新信息。这两种格式虽然存在一些差异，但都旨在简化内容分发流程，提高信息获取效率。</p><ul><li><strong>Atom 1.0</strong>：这是一种较新的标准，由IETF（互联网工程任务组）定义。Atom 1.0规范更加严格，支持更多的元数据字段，如作者信息、分类标签等，因此能够提供更丰富的内容描述。此外，Atom 1.0还支持双向通信，即除了发布更新外，还可以接收反馈信息。</li><li><strong>RSS 2.0</strong>：RSS（Really Simple Syndication）是一种更为广泛使用的格式，主要用于新闻和其他经常更新的信息。RSS 2.0版本较为成熟稳定，兼容性好，大多数RSS阅读器都能很好地支持这一标准。尽管它的功能相对简单，但对于大多数博客和新闻站点而言已经足够使用。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-配置-config-yml的plugins配置"><a href="#2-配置-config-yml的plugins配置" class="headerlink" title="2.配置_config.yml的plugins配置"></a>2.配置_config.yml的plugins配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions  </span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="attr">feed:</span>  </span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span> <span class="comment"># or rss2  </span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span> <span class="comment"># 订阅源路径  </span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span> <span class="comment"># 文章数量限制  </span></span><br><span class="line">  <span class="attr">hub:</span> <span class="comment"># 如果你使用了PubSubHubbub服务，请填写此项  </span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">false</span> <span class="comment"># 如果你想包含完整的文章内容而不是摘要，请设置为true  </span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span> <span class="comment"># 摘要字符长度限制  </span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27;read more&#x27;</span> <span class="comment"># 摘要分隔符  </span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span> <span class="comment"># 文章排序方式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-访问"><a href="#3-访问" class="headerlink" title="3.访问"></a>3.访问</h2><p>访问你自己的网站的atom.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://yoursite/atom.xml</span><br></pre></td></tr></table></figure><p><a href="https://www.brightchen,top/atom.xml">例如我的网站的xml:https://www.brightchen,top/atom.xml</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天翼云盘挂载到linux做为备份盘</title>
      <link href="/7ebf9c57.html"/>
      <url>/7ebf9c57.html</url>
      
        <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>目的：把天翼云盘做为备份盘映射到迷你主机（Linux）上，做为数据备份盘，每月自动备份重要数据一次。</p><p>主要流程：<br>通过alist使天翼云盘能webdav访问，通过rclone实现alist的webdav挂载在Linux上，然后通过rclone的克隆命令，执行定时任务备份数据到天翼云盘上。</p><p>ps：使用的是ubuntu版本的</p><h1 id="1-alist挂载天翼云盘"><a href="#1-alist挂载天翼云盘" class="headerlink" title="1.alist挂载天翼云盘"></a>1.alist挂载天翼云盘</h1><h2 id="1-网页端天翼云盘的cookies"><a href="#1-网页端天翼云盘的cookies" class="headerlink" title="1 网页端天翼云盘的cookies"></a>1 网页端天翼云盘的cookies</h2><p>F12，网络 获取cookies<br><img src="https://www.brightchen.top/picgo/20250107094656716.png" alt="image.png"></p><h2 id="2-选择要映射的自定义目录id"><a href="#2-选择要映射的自定义目录id" class="headerlink" title="2 选择要映射的自定义目录id"></a>2 选择要映射的自定义目录id</h2><p>可以选填-11，或者填写自己创建的文件夹对应的id：425391173447345769，如上图所示</p><h2 id="3-alist配置"><a href="#3-alist配置" class="headerlink" title="3 alist配置"></a>3 alist配置</h2><ol><li>选择：存储-添加</li><li>设置自定义映射目录，比如&#x2F;cloud</li><li>缓存过期时间，默认30或者选择0</li><li>webdav策略选择本地代理</li><li>提前文件夹，提前到最前</li><li>启用签名打开</li><li>输入天翼云的账号密码</li><li>映射的自定义目录id，比如我自定义上图的，或者填-11</li><li>配置映射的alist账号密码：用户-添加<br><img src="https://www.brightchen.top/picgo/20250107094813724.png" alt="image.png"><br><img src="https://www.brightchen.top/picgo/20250107094831702.png" alt="image.png"><br><img src="https://www.brightchen.top/picgo/20250107094859995.png" alt="image.png"></li></ol><h1 id="2-Rclone挂载网盘"><a href="#2-Rclone挂载网盘" class="headerlink" title="2.Rclone挂载网盘"></a>2.Rclone挂载网盘</h1><p>rclone是一个管理云存储上文件的命令行程序，也是云供应商web存储接口的一个功能丰富的替代方案。超过70种云存储产品支持rclone，包括百度智能云对象存储（BOS）、企业和消费者文件存储服务以及标准传输协议。rclone在Linux、Windows和Mac上广泛使用，第三方开发人员可以使用rclone命令行或API创建备份、恢复、和业务流程解决方案。<br><a href="https://rclone.org/downloads/">rclone官网地址</a><br><a href="https://rclone.org/alias/">rclone alist配置</a></p><h2 id="1-linux-安装Rclone"><a href="#1-linux-安装Rclone" class="headerlink" title="1 linux 安装Rclone"></a>1 linux 安装Rclone</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -v ; curl https://rclone.org/install.sh | <span class="built_in">sudo</span> bash</span><br></pre></td></tr></table></figure><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># 进入rclone设置</span><br><span class="line">rclone config</span><br><span class="line"># 选择新远程</span><br><span class="line">No remotes found, make a new one?</span><br><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n/s/q&gt; n #这里选择n</span><br><span class="line"># 设置名字</span><br><span class="line">name&gt; cloud</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line">[snip]</span><br><span class="line">XX / WebDAV</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">[snip]</span><br><span class="line">Storage&gt; webdav #这里输入webdav，也可以选择有个webdav的字段XX（55）</span><br><span class="line"># 设置远程地址url http://your_alist_ip:port/dav</span><br><span class="line">URL of http host to connect to</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / Connect to example.com</span><br><span class="line">   \ &quot;https://example.com&quot;</span><br><span class="line">url&gt; http://127.0.0.1:8081/dav #这里设置alist的地址和端口，后面要带dav,http://ip:端口/dav/，记得替换为ip和端口，我的是本地的IP+端口</span><br><span class="line"># 这里选6 选择带有other的字段</span><br><span class="line">Name of the WebDAV site/service/software you are using</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / Fastmail Files</span><br><span class="line">   \ (fastmail)</span><br><span class="line"> 2 / Nextcloud</span><br><span class="line">   \ (nextcloud)</span><br><span class="line"> 3 / Owncloud</span><br><span class="line">   \ (owncloud)</span><br><span class="line"> 4 / Sharepoint Online, authenticated by Microsoft account</span><br><span class="line">   \ (sharepoint)</span><br><span class="line"> 5 / Sharepoint with NTLM authentication, usually self-hosted or on-premises</span><br><span class="line">   \ (sharepoint-ntlm)</span><br><span class="line"> 6 / Other site/service or software</span><br><span class="line">   \ (other)</span><br><span class="line">vendor&gt; 6    </span><br><span class="line"># 设置远程账号</span><br><span class="line">User name</span><br><span class="line">user&gt; admin #alist的账号</span><br><span class="line"># 设置远程密码</span><br><span class="line">Password.</span><br><span class="line">y) Yes type in my own password</span><br><span class="line">g) Generate random password</span><br><span class="line">n) No leave this optional password blank</span><br><span class="line">y/g/n&gt; y #这里输入y</span><br><span class="line">Enter the password: #alist密码，密码是看不到的</span><br><span class="line">password:</span><br><span class="line">Confirm the password: #再次输入密码</span><br><span class="line">password:</span><br><span class="line"># 这里直接回车即可</span><br><span class="line">Bearer token instead of user/pass (e.g. a Macaroon)</span><br><span class="line">bearer_token&gt;</span><br><span class="line"></span><br><span class="line"># 这里可能会问你是默认还是高级</span><br><span class="line">Edit advanced config?</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; n  #选择n</span><br><span class="line"></span><br><span class="line">#后面的回车即可</span><br><span class="line"># 你的远程信息</span><br><span class="line">--------------------</span><br><span class="line">[remote]</span><br><span class="line">type = webdav</span><br><span class="line">url = http://#.#.#.#:5244/dav/</span><br><span class="line">vendor = Other</span><br><span class="line">user = admin</span><br><span class="line">pass = *** ENCRYPTED ***</span><br><span class="line">--------------------</span><br><span class="line"># 确认</span><br><span class="line">y) Yes this is OK</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y #输入y即可，</span><br><span class="line"># 最后按q退出设置</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-查询十分安装fuse和fuse3（无需安装版）"><a href="#3-查询十分安装fuse和fuse3（无需安装版）" class="headerlink" title="3 查询十分安装fuse和fuse3（无需安装版）"></a>3 查询十分安装fuse和fuse3（无需安装版）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">which fusermount3</span><br><span class="line">#看到下面为y无需安装fuse</span><br><span class="line">grep FUSE /boot/config-$(uname -r)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_FUSE_FS=y</span><br><span class="line">CONFIG_FUSE_DAX=y</span><br></pre></td></tr></table></figure><p>注意设置user_allow_other没有被注释掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fuse.conf</span><br></pre></td></tr></table></figure><h2 id="4-安装fuse3（需安装版）"><a href="#4-安装fuse3（需安装版）" class="headerlink" title="4 安装fuse3（需安装版）"></a>4 安装fuse3（需安装版）</h2><p>fuse3 是 Filesystem in Userspace（用户空间文件系统）的第三个主要版本，它提供了一种机制，允许非特权用户创建自己的文件系统而无需修改内核代码。与之前的版本相比，fuse3 提供了改进的性能、更好的并发处理能力以及更现代化的API支持。如果您打算使用Rclone挂载云存储（如天翼云盘），并且您的Linux发行版支持fuse3，那么安装和配置fuse3可能是有益的。</p><p>安装 fuse3<br>在大多数现代Linux发行版中，您可以直接通过包管理器安装fuse3及其相关依赖项。以下是针对不同发行版的安装指南：</p><p>Debian&#x2F;Ubuntu<br>对于基于Debian或Ubuntu的系统，可以通过以下命令安装fuse3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install fuse</span><br><span class="line">sudo apt-get install fuse3 libfuse3-3</span><br></pre></td></tr></table></figure><p>此外，还需要确保加载了fuse模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe fuse</span><br></pre></td></tr></table></figure><p>为了使该模块在重启后仍然有效，可以将其添加到&#x2F;etc&#x2F;modules-load.d&#x2F;中的一个新文件里，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo fuse | sudo tee /etc/modules-load.d/fuse.conf</span><br></pre></td></tr></table></figure><h2 id="5-挂载命令"><a href="#5-挂载命令" class="headerlink" title="5 挂载命令"></a>5 挂载命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/cloud</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rclone mount cloud:/ /mnt/cloud</span><br><span class="line">   --<span class="built_in">umask</span> 000 \</span><br><span class="line">   --allow-non-empty \</span><br><span class="line">   --allow-other \</span><br><span class="line">   --buffer-size 32M \</span><br><span class="line">   --low-level-retries 200 \</span><br><span class="line">   --dir-cache-time 2h \</span><br><span class="line">   --vfs-read-chunk-size 64M \</span><br><span class="line">   --vfs-read-chunk-size-limit 1G \</span><br><span class="line">   --vfs-cache-mode full \</span><br><span class="line">   --transfers=8 \</span><br><span class="line">   --tpslimit=5 \</span><br><span class="line">   --checkers=20 \</span><br><span class="line">   --log-file=/var/log/rclone.log \</span><br><span class="line">   --log-level=DEBUG &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数解释</p><ul><li>**<code>--umask 000</code>**：赋予所有用户对挂载点上的文件和目录完全的读、写和执行权限。请注意，这种配置可能存在安全风险。</li><li>**<code>--allow-non-empty</code>**：允许挂载到非空目录上。</li><li>**<code>--allow-other</code>**：允许其他用户访问挂载点。</li><li>**<code>--buffer-size 32M</code>**：设置单个文件传输的最大缓冲区大小为32MB。</li><li>**<code>--low-level-retries 200</code>**：设置低级别重试次数为200次，以处理网络波动。</li><li>**<code>--dir-cache-time 2h</code>**：设置目录缓存时间为2小时，减少频繁查询远程服务器的需求。</li><li>**<code>--vfs-read-chunk-size 64M</code>**：设置读取文件时的块大小为64MB。</li><li>**<code>--vfs-read-chunk-size-limit 1G</code>**：设置读取文件时的最大块大小限制为1GB。</li><li>**<code>--vfs-cache-mode full</code>**：启用完整缓存模式，将所有文件缓存到本地磁盘。</li><li>**<code>--transfers=8</code>**：设置并发传输的数量为8。</li><li>**<code>--tpslimit=5</code>**：每秒传输请求数量限制为5。</li><li>**<code>--checkers=20</code>**：设置用于检查文件是否存在或是否需要更新的并发数量为20。</li><li>**<code>--log-file=/var/log/rclone.log</code>**：指定日志文件的位置。</li><li>**<code>--log-level=DEBUG</code>**：启用详细日志记录，便于调试和问题排查。</li></ul><h2 id="6-卸载挂载"><a href="#6-卸载挂载" class="headerlink" title="6 卸载挂载"></a>6 卸载挂载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fusermount -qzu 挂载的本地目录</span><br></pre></td></tr></table></figure><h2 id="7-开机自动挂载"><a href="#7-开机自动挂载" class="headerlink" title="7 开机自动挂载"></a>7 开机自动挂载</h2><p>创建serveice文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/systemd/system/rclone-mount.service</span><br></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Rclone mount for cloud storage</span><br><span class="line"><span class="attr">Wants</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=root</span><br><span class="line"><span class="attr">Group</span>=root</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/rclone mount \</span><br><span class="line">   cloud:/ /mnt/cloud \</span><br><span class="line">   --umask 000 \</span><br><span class="line">   --allow-non-empty \</span><br><span class="line">   --allow-other \</span><br><span class="line">   --buffer-size 32M \</span><br><span class="line">   --low-level-retries 200 \</span><br><span class="line">   --dir-cache-time 2h \</span><br><span class="line">   --vfs-read-chunk-size 64M \</span><br><span class="line">   --vfs-read-chunk-size-limit 1G \</span><br><span class="line">   --vfs-cache-mode full \</span><br><span class="line">   <span class="attr">--transfers</span>=<span class="number">8</span> \</span><br><span class="line">   <span class="attr">--tpslimit</span>=<span class="number">5</span> \</span><br><span class="line">   <span class="attr">--checkers</span>=<span class="number">20</span> \</span><br><span class="line">   <span class="attr">--log-file</span>=/var/log/rclone.log \</span><br><span class="line">   <span class="attr">--log-level</span>=DEBUG</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">KillMode</span>=mixed</span><br><span class="line"><span class="attr">UMask</span>=<span class="number">000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=default.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> rclone-mount.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl start rclone-mount.service</span><br></pre></td></tr></table></figure><h1 id="3-定时备份重要数据到天翼云盘"><a href="#3-定时备份重要数据到天翼云盘" class="headerlink" title="3.定时备份重要数据到天翼云盘"></a>3.定时备份重要数据到天翼云盘</h1><h2 id="1-创建文件夹及文件"><a href="#1-创建文件夹及文件" class="headerlink" title="1 创建文件夹及文件"></a>1 创建文件夹及文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/cloud/backup</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /usr/local/bin/mybackup.sh</span><br></pre></td></tr></table></figure><h2 id="2-备份目标（备份命令）"><a href="#2-备份目标（备份命令）" class="headerlink" title="2 备份目标（备份命令）"></a>2 备份目标（备份命令）</h2><p>1.图床 数据  &#x2F;var&#x2F;minio<br>2.waline评论数据 &#x2F;var&#x2F;alist&#x2F;data&#x2F;commonSave&#x2F;bright&#x2F;waline&#x2F;data</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要备份的源目录列表</span></span><br><span class="line">SOURCES=(</span><br><span class="line">    <span class="string">&quot;/var/alist/data/commonSave/bright/waline/data&quot;</span></span><br><span class="line">    <span class="string">&quot;/var/minio&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义目标备份根目录</span></span><br><span class="line">BACKUP_ROOT=<span class="string">&quot;/mnt/cloud/backup&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前日期（格式：YYYY-MM-DD）</span></span><br><span class="line">CURRENT_DATE=$(<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建基于当前日期的目标目录</span></span><br><span class="line">DESTINATION=<span class="string">&quot;<span class="variable">$BACKUP_ROOT</span>/<span class="variable">$CURRENT_DATE</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 rclone 配置文件路径（如果需要）</span></span><br><span class="line">RCLONE_CONFIG=<span class="string">&quot;/root/.config/rclone/rclone.conf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件路径</span></span><br><span class="line">LOG_FILE=<span class="string">&quot;/var/log/backup.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始备份</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Starting backup at <span class="subst">$(date)</span>&quot;</span> &gt;&gt; <span class="variable">$LOG_FILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保目标日期目录存在</span></span><br><span class="line">/usr/bin/rclone <span class="built_in">mkdir</span> --config=<span class="variable">$RCLONE_CONFIG</span> <span class="string">&quot;<span class="variable">$DESTINATION</span>&quot;</span> &gt;&gt; <span class="variable">$LOG_FILE</span> 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份每个源目录到日期目录下的同名子目录</span></span><br><span class="line"><span class="keyword">for</span> SOURCE <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;SOURCES[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    SOURCE_BASENAME=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$SOURCE</span>&quot;</span>)</span><br><span class="line">    DESTINATION_PATH=<span class="string">&quot;<span class="variable">$DESTINATION</span>/<span class="variable">$SOURCE_BASENAME</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Backing up <span class="variable">$SOURCE</span> to <span class="variable">$DESTINATION_PATH</span>&quot;</span> &gt;&gt; <span class="variable">$LOG_FILE</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 确保目标子目录存在</span></span><br><span class="line">    /usr/bin/rclone <span class="built_in">mkdir</span> --config=<span class="variable">$RCLONE_CONFIG</span> <span class="string">&quot;<span class="variable">$DESTINATION_PATH</span>&quot;</span> &gt;&gt; <span class="variable">$LOG_FILE</span> 2&gt;&amp;1</span><br><span class="line">    </span><br><span class="line">    /usr/bin/rclone <span class="built_in">sync</span> \</span><br><span class="line">        --config=<span class="variable">$RCLONE_CONFIG</span> \</span><br><span class="line">        <span class="string">&quot;<span class="variable">$SOURCE</span>&quot;</span> <span class="string">&quot;<span class="variable">$DESTINATION_PATH</span>&quot;</span> \</span><br><span class="line">        --transfers=8 \</span><br><span class="line">        --checkers=20 \</span><br><span class="line">        --log-file=<span class="variable">$LOG_FILE</span> \</span><br><span class="line">        --log-level=INFO</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Backup completed at <span class="subst">$(date)</span>&quot;</span> &gt;&gt; <span class="variable">$LOG_FILE</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/mybackup.sh</span><br></pre></td></tr></table></figure><h2 id="3-编辑-root-用户的-crontab-文件"><a href="#3-编辑-root-用户的-crontab-文件" class="headerlink" title="3 编辑 root 用户的 crontab 文件"></a>3 编辑 root 用户的 crontab 文件</h2><p>使用 crontab -e 命令编辑 root 用户的 crontab 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> crontab -e</span><br></pre></td></tr></table></figure><h2 id="4-添加定时任务"><a href="#4-添加定时任务" class="headerlink" title="4 添加定时任务"></a>4 添加定时任务</h2><p>添加一行来定义备份任务的时间间隔。例如，每月一号凌晨 2 点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 1 * * /usr/local/bin/mybackup.sh</span><br></pre></td></tr></table></figure><h2 id="5-手动执行一遍"><a href="#5-手动执行一遍" class="headerlink" title="5 手动执行一遍"></a>5 手动执行一遍</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/mybackup.sh</span><br></pre></td></tr></table></figure><h2 id="6-查看执行日志"><a href="#6-查看执行日志" class="headerlink" title="6 查看执行日志"></a>6 查看执行日志</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -2000f /var/log/backup.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一.hexo+butterfly+github的下载安装及部署</title>
      <link href="/319edf64.html"/>
      <url>/319edf64.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-参考地址"><a href="#1-参考地址" class="headerlink" title="1.参考地址"></a>1.参考地址</h2><p><a href="https://hexo.io/zh-cn/docs/index.html">官网文档</a></p><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)<br>可以参考文章<a href="./20077.html">node和python多版本控制</a></li><li><a href="http://git-scm.com/">Git</a></li></ul><h2 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2.安装 Hexo"></a>2.安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1.安装"></a>2.1.安装</h3><p>改为淘宝镜像源：10s 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>安装hexo命令工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>下载安装hexo的Git部署插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><h3 id="2-2-初始化项目"><a href="#2-2-初始化项目" class="headerlink" title="2.2 初始化项目"></a>2.2 初始化项目</h3><p>建站 注意到自定义目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo init</span><br></pre></td></tr></table></figure><h3 id="2-3-编译部署及启动"><a href="#2-3-编译部署及启动" class="headerlink" title="2.3. 编译部署及启动"></a>2.3. 编译部署及启动</h3><p><strong>编译： g 生成public静态文件，<br>启动：s启动服务<br>-p指定端口，没有-p 默认4000端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo g &amp; npx hexo s -p 8084</span><br></pre></td></tr></table></figure><h2 id="3-安装Butterfly主题"><a href="#3-安装Butterfly主题" class="headerlink" title="3.安装Butterfly主题"></a>3.安装Butterfly主题</h2><h3 id="3-1下载主题"><a href="#3-1下载主题" class="headerlink" title="3.1下载主题"></a>3.1下载主题</h3><p>在Hexo项目的根目录下，使用以下命令安装Butterfly主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h3 id="3-2安装必要的渲染器pug和stylus"><a href="#3-2安装必要的渲染器pug和stylus" class="headerlink" title="3.2安装必要的渲染器pug和stylus"></a>3.2安装必要的渲染器pug和stylus</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure><h3 id="3-3hexo-启用butterfly"><a href="#3-3hexo-启用butterfly" class="headerlink" title="3.3hexo 启用butterfly"></a>3.3hexo 启用butterfly</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6.修改站点配置文件_config.yml</span></span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h3 id="3-4-clean-清除文件，然后重新加载部署"><a href="#3-4-clean-清除文件，然后重新加载部署" class="headerlink" title="3.4 clean 清除文件，然后重新加载部署"></a>3.4 clean 清除文件，然后重新加载部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo g &amp; npx hexo s -p 8084</span><br></pre></td></tr></table></figure><h2 id="4-github-page发布"><a href="#4-github-page发布" class="headerlink" title="4. github page发布"></a>4. github page发布</h2><h3 id="4-1公钥生成"><a href="#4-1公钥生成" class="headerlink" title="4.1公钥生成"></a>4.1公钥生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;Gitee SSH Key&quot;</span></span><br><span class="line">- `-t` key 类型</span><br><span class="line">- `-C` 注释</span><br></pre></td></tr></table></figure><h3 id="4-2公钥测试"><a href="#4-2公钥测试" class="headerlink" title="4.2公钥测试"></a>4.2公钥测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="4-3修改站点配置文件-config-yml"><a href="#4-3修改站点配置文件-config-yml" class="headerlink" title="4.3修改站点配置文件_config.yml"></a>4.3修改站点配置文件_config.yml</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">   github: git@github.com:brightChenGit/brightChenGit.github.io.git</span><br><span class="line">   #coding: git@e.coding.net:xxx.git</span><br><span class="line">   #gitee: git@gitee.com:xxx.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="4-4推送"><a href="#4-4推送" class="headerlink" title="4.4推送"></a>4.4推送</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口安全防线加解密(二)：加密后请求异常和文件上传处理</title>
      <link href="/60634.html"/>
      <url>/60634.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-加密请求异常后请求-error处理"><a href="#1-加密请求异常后请求-error处理" class="headerlink" title="1.加密请求异常后请求&#x2F;error处理"></a>1.加密请求异常后请求&#x2F;error处理</h2><p>目的：解决解密时，解密时参数对象类型不同导致抛出异常后接口二次请求到&#x2F;error的问题<br>方式：设置异常拦截器，自定义捕获异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(GlobalExceptionConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义捕获异常，加密返回前端数据</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">AllException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        logger.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> EncryptApi(e.getMessage());</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        json.put(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">EncryptApi</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="comment">//加密返回前端数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-HttpServletRequestWrapper处理文件被破坏的问题"><a href="#2-HttpServletRequestWrapper处理文件被破坏的问题" class="headerlink" title="2.HttpServletRequestWrapper处理文件被破坏的问题"></a>2.HttpServletRequestWrapper处理文件被破坏的问题</h2><p>1.对文件上传的的请求不进行string读取，进行byte[] 转换<br>2.不对文件上传加密<br>3.文件上传有数据时，原路返还</p><p>重点是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bodyBytes= StreamUtils.copyToByteArray(inputStream);</span><br></pre></td></tr></table></figure><p> 和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bodyBytes!=<span class="literal">null</span>&amp;&amp;bodyBytes.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">byteArrayInputStream = <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bodyBytes);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">byteArrayInputStream = <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(body.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StreamUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ReadListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String body;</span><br><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[] bodyBytes;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String[]&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String[]&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RequestWrapper</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(request);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = request.getInputStream();</span><br><span class="line">            <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> request.getContentType();</span><br><span class="line">            <span class="comment">//RequestWrapper继承了HttpServletRequestWrapper，获取request并读取了inputstream把inputsream转为string，而文件上传时，inpustream转为string，就会出现解析出错，文件损坏</span></span><br><span class="line">            <span class="keyword">if</span> (contentType!=<span class="literal">null</span>&amp;&amp; contentType.startsWith(MediaType.MULTIPART_FORM_DATA_VALUE)) &#123;</span><br><span class="line">                bodyBytes= StreamUtils.copyToByteArray(inputStream);</span><br><span class="line">                inputStream= <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bodyBytes);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">                <span class="type">char</span>[] charBuffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">128</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((bytesRead = bufferedReader.read(charBuffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    stringBuilder.append(charBuffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stringBuilder.append(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.body = stringBuilder.toString();</span><br><span class="line">        <span class="built_in">this</span>.params.putAll(request.getParameterMap());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletInputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">         <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(bodyBytes!=<span class="literal">null</span>&amp;&amp;bodyBytes.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            byteArrayInputStream = <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bodyBytes);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            byteArrayInputStream = <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(body.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">finalByteArrayInputStream</span> <span class="operator">=</span> byteArrayInputStream;</span><br><span class="line">        <span class="type">ServletInputStream</span> <span class="variable">servletInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletInputStream</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFinished</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isReady</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setReadListener</span><span class="params">(ReadListener readListener)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> finalByteArrayInputStream.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> servletInputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载一个构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RequestWrapper</span><span class="params">(HttpServletRequest request, Map&lt;String, Object&gt; extendParams, String body)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(request);</span><br><span class="line">        <span class="keyword">if</span> (body != <span class="literal">null</span> &amp;&amp; body.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            setBody(body);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (extendParams.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            addAllParameters(extendParams);<span class="comment">// 这里将扩展参数写入参数表</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BufferedReader <span class="title function_">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="built_in">this</span>.getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBody</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值给body字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBody</span><span class="params">(String body)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.body = body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">(String name)</span> &#123;<span class="comment">// 重写getParameter，代表参数从当前类中的map获取</span></span><br><span class="line">        String[] values = params.get(name);</span><br><span class="line">        <span class="keyword">if</span> (values == <span class="literal">null</span> || values.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;<span class="comment">// 同上</span></span><br><span class="line">        <span class="keyword">return</span> params.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改此方法主要是因为当RequestMapper中的参数为pojo类型时，</span></span><br><span class="line"><span class="comment">     * 会通过此方法获取所有的请求参数并进行遍历，对pojo属性赋值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getParameterNames</span><span class="params">()</span> &#123;<span class="comment">// 同上</span></span><br><span class="line">        ArrayList&lt;String&gt; list = list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; entry : params.entrySet()) &#123;</span><br><span class="line">            list.add(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Collections.enumeration(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAllParameters</span><span class="params">(Map&lt;String, Object&gt; otherParams)</span> &#123;<span class="comment">// 增加多个参数</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : otherParams.entrySet()) &#123;</span><br><span class="line">            addParameter(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addParameter</span><span class="params">(String name, Object value)</span> &#123;<span class="comment">// 增加参数</span></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String[]) &#123;</span><br><span class="line">                params.put(name, (String[]) value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                params.put(name, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;(String) value&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                params.put(name, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;String.valueOf(value)&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getBodyBytes() &#123;</span><br><span class="line">        <span class="keyword">return</span> bodyBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBodyBytes</span><span class="params">(<span class="type">byte</span>[] bodyBytes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bodyBytes = bodyBytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口安全防线加解密(一)：springboot 全局/指定接口解密（同时支持参数在body和param）</title>
      <link href="/26376.html"/>
      <url>/26376.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h2><ol><li>过滤器，过滤所有请求，利用HttpServletRequestWrapper解决request中流读取一次的处理，方便后续修改请求内容</li><li>自定义注解，通过自定义注解可以标识，指定哪些接口在拦截器中处理数据</li><li>拦截器，拦截带有指定注解的请求，把数据进行加密解密后返回处理</li><li>优势：通过注解形式，不需要改变原接口请求参数，在拦截器里面把加密数据解密为原接口请求参数。同时支持application&#x2F;x-www-form-urlencoded和application&#x2F;json 的解密</li></ol><hr><h2 id="2-支持范围"><a href="#2-支持范围" class="headerlink" title="2.支持范围"></a>2.支持范围</h2><h3 id="2-1-实际可以自己改造适合多种情况处理，已支持以下"><a href="#2-1-实际可以自己改造适合多种情况处理，已支持以下" class="headerlink" title="2.1.实际可以自己改造适合多种情况处理，已支持以下"></a>2.1.实际可以自己改造适合多种情况处理，已支持以下</h3><p>1.application&#x2F;json 加密参数在body<br>2.application&#x2F;x-www-form-urlencoded 支持参数在body或者在param</p><h3 id="2-2-为什么不用RequestBodyAdvice"><a href="#2-2-为什么不用RequestBodyAdvice" class="headerlink" title="2.2.为什么不用RequestBodyAdvice"></a>2.2.为什么不用RequestBodyAdvice</h3><p>1.因为RequestBodyAdvice只支持body内容的数据加解密处理，具有局限性。</p><hr><h2 id="3-具体实现代码"><a href="#3-具体实现代码" class="headerlink" title="3.具体实现代码"></a>3.具体实现代码</h2><h3 id="3-1-过滤器-目的读取request，为后续自定义数据做铺垫"><a href="#3-1-过滤器-目的读取request，为后续自定义数据做铺垫" class="headerlink" title="3.1. 过滤器(目的读取request，为后续自定义数据做铺垫)"></a>3.1. 过滤器(目的读取request，为后续自定义数据做铺垫)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author: bright chen</span><br><span class="line"> */</span><br><span class="line">@WebFilter(value = &quot;/*&quot;, filterName = &quot;uriFormatFilter&quot;)</span><br><span class="line">public class UriFormatFilter extends OncePerRequestFilter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        String uri = httpServletRequest.getRequestURI();</span><br><span class="line">        String newUri = uri.replace(&quot;//&quot;,&quot;/&quot;);</span><br><span class="line">        httpServletRequest = new HttpServletRequestWrapper(httpServletRequest)&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String getRequestURI() &#123;</span><br><span class="line">                return newUri;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ServletRequest requestWrapper=new RequestWrapper(httpServletRequest);</span><br><span class="line">        if(requestWrapper!=null)&#123;</span><br><span class="line">            filterChain.doFilter(requestWrapper,httpServletResponse);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-自定义HttpServletRequestWrapper（重点1，param赋值，body赋值，param-pojo读取时赋值）（2024-08-08-优化兼容springboot-actuator）"><a href="#3-2-自定义HttpServletRequestWrapper（重点1，param赋值，body赋值，param-pojo读取时赋值）（2024-08-08-优化兼容springboot-actuator）" class="headerlink" title="3.2.自定义HttpServletRequestWrapper（重点1，param赋值，body赋值，param pojo读取时赋值）（2024-08-08 优化兼容springboot actuator）"></a>3.2.自定义HttpServletRequestWrapper（重点1，param赋值，body赋值，param pojo读取时赋值）（2024-08-08 优化兼容springboot actuator）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author: bright chen</span><br><span class="line"> */</span><br><span class="line">public class RequestWrapper extends HttpServletRequestWrapper &#123;</span><br><span class="line">        private String body;</span><br><span class="line">    private byte[] bodyBytes;</span><br><span class="line">    private Map&lt;String, String[]&gt; params = new HashMap&lt;String, String[]&gt;();</span><br><span class="line"></span><br><span class="line">    public RequestWrapper(HttpServletRequest request) &#123;</span><br><span class="line">        super(request);</span><br><span class="line">        StringBuilder stringBuilder = new StringBuilder();</span><br><span class="line">        BufferedReader bufferedReader = null;</span><br><span class="line">        InputStream inputStream = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inputStream = request.getInputStream();</span><br><span class="line">            String contentType = request.getContentType();</span><br><span class="line">            //RequestWrapper继承了HttpServletRequestWrapper，获取request并读取了inputstream把inputsream转为string，而文件上传时，inpustream转为string，就会出现解析出错，文件损坏</span><br><span class="line">            if (contentType!=null&amp;&amp; contentType.startsWith(MediaType.MULTIPART_FORM_DATA_VALUE)) &#123;</span><br><span class="line">                bodyBytes= StreamUtils.copyToByteArray(inputStream);</span><br><span class="line">                inputStream= new ByteArrayInputStream(bodyBytes);</span><br><span class="line">            &#125;</span><br><span class="line">            if (contentType != null &amp;&amp; contentType.startsWith(MediaType.APPLICATION_FORM_URLENCODED_VALUE)) &#123;</span><br><span class="line">                bodyBytes = StreamUtils.copyToByteArray(request.getInputStream());</span><br><span class="line">                body = new String(bodyBytes, StandardCharsets.UTF_8);</span><br><span class="line">                params.putAll(parseParameters(body));</span><br><span class="line">            &#125;</span><br><span class="line">            if (inputStream != null) &#123;</span><br><span class="line">                bufferedReader = new BufferedReader(new InputStreamReader(inputStream));</span><br><span class="line">                char[] charBuffer = new char[128];</span><br><span class="line">                int bytesRead = -1;</span><br><span class="line">                while ((bytesRead = bufferedReader.read(charBuffer)) &gt; 0) &#123;</span><br><span class="line">                    stringBuilder.append(charBuffer, 0, bytesRead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                stringBuilder.append(&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (inputStream != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (bufferedReader != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.body = stringBuilder.toString();</span><br><span class="line">        this.params.putAll(request.getParameterMap());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Map&lt;String, String[]&gt; parseParameters(String body) &#123;</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = new HashMap&lt;&gt;();</span><br><span class="line">        String[] pairs = body.split(&quot;&amp;&quot;);</span><br><span class="line">        for (String pair : pairs) &#123;</span><br><span class="line">            int idx = pair.indexOf(&quot;=&quot;);</span><br><span class="line">            String name = idx &gt; 0 ? URLDecoder.decode(pair.substring(0, idx), StandardCharsets.UTF_8) : pair;</span><br><span class="line">            String value = idx &gt; 0 &amp;&amp; pair.length() &gt; idx + 1 ? URLDecoder.decode(pair.substring(idx + 1), StandardCharsets.UTF_8) : &quot;&quot;;</span><br><span class="line">            parameterMap.computeIfAbsent(name, k -&gt; new String[]&#123;&#125;);</span><br><span class="line">            String[] existingValues = parameterMap.get(name);</span><br><span class="line">            String[] newValues = Arrays.copyOf(existingValues, existingValues.length + 1);</span><br><span class="line">            newValues[newValues.length - 1] = value;</span><br><span class="line">            parameterMap.put(name, newValues);</span><br><span class="line">        &#125;</span><br><span class="line">        return parameterMap;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        return params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ServletInputStream getInputStream() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">         ByteArrayInputStream byteArrayInputStream =null;</span><br><span class="line">        if(bodyBytes!=null&amp;&amp;bodyBytes.length&gt;0)&#123;</span><br><span class="line">            byteArrayInputStream = new ByteArrayInputStream(bodyBytes);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            byteArrayInputStream = new ByteArrayInputStream(body.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream finalByteArrayInputStream = byteArrayInputStream;</span><br><span class="line">        ServletInputStream servletInputStream = new ServletInputStream() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean isFinished() &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public boolean isReady() &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void setReadListener(ReadListener readListener) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public int read() throws IOException &#123;</span><br><span class="line">                return finalByteArrayInputStream.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        return servletInputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 重载一个构造方法</span><br><span class="line">    public RequestWrapper(HttpServletRequest request, Map&lt;String, Object&gt; extendParams, String body) &#123;</span><br><span class="line">        this(request);</span><br><span class="line">        if (body != null &amp;&amp; body.length() &gt; 0) &#123;</span><br><span class="line">            setBody(body);</span><br><span class="line">        &#125;</span><br><span class="line">        if (extendParams.size() &gt; 0) &#123;</span><br><span class="line">            addAllParameters(extendParams);// 这里将扩展参数写入参数表</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public BufferedReader getReader() throws IOException &#123;</span><br><span class="line">        return new BufferedReader(new InputStreamReader(this.getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getBody() &#123;</span><br><span class="line">        return this.body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 赋值给body字段</span><br><span class="line">    public void setBody(String body) &#123;</span><br><span class="line">        this.body = body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getParameter(String name) &#123;// 重写getParameter，代表参数从当前类中的map获取</span><br><span class="line">        String[] values = params.get(name);</span><br><span class="line">        if (values == null || values.length == 0) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return values[0];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String[] getParameterValues(String name) &#123;// 同上</span><br><span class="line">        return params.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改此方法主要是因为当RequestMapper中的参数为pojo类型时，</span><br><span class="line">     * 会通过此方法获取所有的请求参数并进行遍历，对pojo属性赋值</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Enumeration&lt;String&gt; getParameterNames() &#123;// 同上</span><br><span class="line">        ArrayList&lt;String&gt; list = list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (Map.Entry&lt;String, String[]&gt; entry : params.entrySet()) &#123;</span><br><span class="line">            list.add(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        return Collections.enumeration(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addAllParameters(Map&lt;String, Object&gt; otherParams) &#123;// 增加多个参数</span><br><span class="line">        for (Map.Entry&lt;String, Object&gt; entry : otherParams.entrySet()) &#123;</span><br><span class="line">            addParameter(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void addParameter(String name, Object value) &#123;// 增加参数</span><br><span class="line">        if (value != null) &#123;</span><br><span class="line">            if (value instanceof String[]) &#123;</span><br><span class="line">                params.put(name, (String[]) value);</span><br><span class="line">            &#125; else if (value instanceof String) &#123;</span><br><span class="line">                params.put(name, new String[]&#123;(String) value&#125;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                params.put(name, new String[]&#123;String.valueOf(value)&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public byte[] getBodyBytes() &#123;</span><br><span class="line">        return bodyBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBodyBytes(byte[] bodyBytes) &#123;</span><br><span class="line">        this.bodyBytes = bodyBytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-自定义注解-DecryptApi，后期在controller层带上这个注解则该controller层接口会被过滤器及拦截器进行解密处理。"><a href="#3-3-自定义注解-DecryptApi，后期在controller层带上这个注解则该controller层接口会被过滤器及拦截器进行解密处理。" class="headerlink" title="3.3.自定义注解  @DecryptApi，后期在controller层带上这个注解则该controller层接口会被过滤器及拦截器进行解密处理。"></a>3.3.自定义注解  @DecryptApi，后期在controller层带上这个注解则该controller层接口会被过滤器及拦截器进行解密处理。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 支持params和body的解密</span><br><span class="line"> * 支持</span><br><span class="line"> * @Author: bright chen</span><br><span class="line"> */</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.METHOD,ElementType.PARAMETER&#125;)</span><br><span class="line">public @interface DecryptApi &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-（核心代码）-拦截器-DecryptInterceptor，对带有-DecryptApi注解的接口数据进行解密处理后重新赋值，注意配置-拦截所有请求"><a href="#3-4-（核心代码）-拦截器-DecryptInterceptor，对带有-DecryptApi注解的接口数据进行解密处理后重新赋值，注意配置-拦截所有请求" class="headerlink" title="3.4. （核心代码） 拦截器 DecryptInterceptor，对带有@DecryptApi注解的接口数据进行解密处理后重新赋值，注意配置 拦截所有请求"></a>3.4. （核心代码） 拦截器 DecryptInterceptor，对带有@DecryptApi注解的接口数据进行解密处理后重新赋值，注意配置 拦截所有请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author: bright chen</span><br><span class="line"> * api 解密拦截器</span><br><span class="line"> */</span><br><span class="line">public class DecryptInterceptor extends HandlerInterceptorAdapter &#123;</span><br><span class="line">    private static Logger logger = LogManager.getLogger(DecryptInterceptor.class);</span><br><span class="line">    @Autowired</span><br><span class="line">    private EncryptProperties encryptProperties;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Controller之前执行</span><br><span class="line">     * preHandle：拦截于请求刚进入时，进行判断，需要boolean返回值，如果返回true将继续执行，如果返回false，将不进行执行。一般用于登录校验</span><br><span class="line">     * 1.当preHandle方法返回false时，从当前拦截器往回执行所有拦截器的afterCompletion方法，再退出拦截器链。也就是说，请求不继续往下传了，直接沿着来的链往回跑。</span><br><span class="line">     * 2.当preHandle方法全为true时，执行下一个拦截器,直到所有拦截器执行完。再运行被拦截的Controller。然后进入拦截器链，运行所有拦截器的postHandle方法,</span><br><span class="line">     * 完后从最后一个拦截器往回执行所有拦截器的afterCompletion方法.</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            if (handler instanceof HandlerMethod) &#123;</span><br><span class="line">                HandlerMethod method = (HandlerMethod) handler;</span><br><span class="line">                // RequireLogin annotation = method.getMethodAnnotation(RequireLogin.class);</span><br><span class="line">                if (method.hasMethodAnnotation(DecryptApi.class)) &#123;</span><br><span class="line">                    // 需要对数据进行加密解密</span><br><span class="line">                    // 1.对application/json类型</span><br><span class="line">                    String contentType = request.getContentType();</span><br><span class="line">                    if (contentType == null &amp;&amp; !&quot;GET&quot;.equals(request.getMethod())) &#123;</span><br><span class="line">                        // 请求不通过，返回错误信息给客户端</span><br><span class="line">                        responseResult(response, response.getWriter(), TResponse.FAIL(&quot;Decrypt failed&quot;));</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String requestBody = null;</span><br><span class="line">                    boolean shouldEncrypt = false;</span><br><span class="line"></span><br><span class="line">                    if ((contentType != null &amp;&amp; StringUtils.substringMatch(contentType, 0,</span><br><span class="line">                            MediaType.APPLICATION_FORM_URLENCODED_VALUE)) || &quot;GET&quot;.equals(request.getMethod())) &#123;</span><br><span class="line">                        // 1.application/x-www-form-urlencoded 支持参数在body或者在param</span><br><span class="line">                        shouldEncrypt = true;</span><br><span class="line">                        requestBody = convertFormToString(request);</span><br><span class="line">                        if (requestBody == null || &quot;&#123;&#125;&quot;.equals(requestBody)) &#123;</span><br><span class="line">                            requestBody = URLDecoder.decode(convertInputStreamToString(request.getInputStream()),</span><br><span class="line">                                    &quot;UTF-8&quot;);</span><br><span class="line">                            List&lt;String&gt; uriToList =</span><br><span class="line">                                    Stream.of(requestBody.split(&quot;&amp;&quot;)).map(elem -&gt; new String(elem)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">                            Map&lt;String, String&gt; uriToListToMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            for (String individualElement : uriToList) &#123;</span><br><span class="line">                                if (individualElement.split(&quot;=&quot;)[0] != null &amp;&amp; !&quot;&quot;.equals(individualElement.split(&quot;=&quot;)[0])) &#123;</span><br><span class="line">                                    uriToListToMap.put(individualElement.split(&quot;=&quot;)[0],</span><br><span class="line">                                            individualElement.substring(individualElement.split(&quot;=&quot;)[0].length() + 1));</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                            requestBody = JSONObject.toJSONString(uriToListToMap);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; else if (StringUtils.substringMatch(contentType, 0, MediaType.APPLICATION_JSON_VALUE)) &#123;</span><br><span class="line">                        // application/json 支持加密参数在body</span><br><span class="line">                        shouldEncrypt = true;</span><br><span class="line">                        requestBody = convertInputStreamToString(request.getInputStream());</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (requestBody == null || &quot;&#123;&#125;&quot;.equals(requestBody)||!shouldEncrypt) &#123;</span><br><span class="line">                        return true;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                        String result = decodeApi(JSON.parseObject(requestBody, StdRequestApi.class),</span><br><span class="line">                                encryptProperties.getPrivateKey());</span><br><span class="line">                        if (result == null) &#123;</span><br><span class="line">                            // 请求不通过，返回错误信息给客户端</span><br><span class="line">                            responseResult(response, response.getWriter(), TResponse.FAIL(&quot;Decrypt failed&quot;));</span><br><span class="line">                            return false;</span><br><span class="line">                        &#125;</span><br><span class="line">                        JSONObject jasonObject = JSONObject.parseObject(result);</span><br><span class="line">                        Map map = (Map) jasonObject;</span><br><span class="line">                        if (request instanceof RequestWrapper) &#123;</span><br><span class="line">                            RequestWrapper requestWrapper = (RequestWrapper) request;</span><br><span class="line">                            requestWrapper.setBody(result);</span><br><span class="line">                            requestWrapper.addAllParameters(map);</span><br><span class="line">                            // requestWrapper = new RequestWrapper(request, map, result);</span><br><span class="line">                            return true;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    String contentType = request.getContentType();</span><br><span class="line">                    if (contentType != null &amp;&amp; contentType.length() &gt; 0 &amp;&amp; StringUtils.substringMatch(contentType, 0,</span><br><span class="line">                            MediaType.APPLICATION_FORM_URLENCODED_VALUE)) &#123;</span><br><span class="line">                        // 1.application/x-www-form-urlencoded 支持参数在body或者在param</span><br><span class="line">                        String requestBody = convertFormToString(request);</span><br><span class="line">                        if (requestBody == null || &quot;&#123;&#125;&quot;.equals(requestBody)) &#123;</span><br><span class="line">                            // 把流数据放进param中,不解密</span><br><span class="line">                            requestBody = URLDecoder.decode(convertInputStreamToString(request.getInputStream()),</span><br><span class="line">                                    &quot;UTF-8&quot;);</span><br><span class="line">                            List&lt;String&gt; uriToList =</span><br><span class="line">                                    Stream.of(requestBody.split(&quot;&amp;&quot;)).map(elem -&gt; new String(elem)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">                            Map&lt;String, Object&gt; uriToListToMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                            for (String individualElement : uriToList) &#123;</span><br><span class="line">                                if (individualElement.split(&quot;=&quot;)[0] != null &amp;&amp; !&quot;&quot;.equals(individualElement.split(&quot;=&quot;)[0])) &#123;</span><br><span class="line">                                    uriToListToMap.put(individualElement.split(&quot;=&quot;)[0],</span><br><span class="line">                                            individualElement.substring(individualElement.split(&quot;=&quot;)[0].length() + 1));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            if (request instanceof RequestWrapper) &#123;</span><br><span class="line">                                RequestWrapper requestWrapper = (RequestWrapper) request;</span><br><span class="line">                                requestWrapper.setBody(requestBody);</span><br><span class="line">                                requestWrapper.addAllParameters(uriToListToMap);</span><br><span class="line">                                return true;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(e.getMessage() + &quot;异常地址：&quot; + request.getServletPath());</span><br><span class="line">            responseResult(response, response.getWriter(), TResponse.FAIL(&quot;Decrypt failed&quot;));</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回信息给客户端</span><br><span class="line">     *</span><br><span class="line">     * @param response</span><br><span class="line">     * @param tResponse</span><br><span class="line">     */</span><br><span class="line">    private void responseResult(HttpServletResponse response, TResponse tResponse) throws IOException &#123;</span><br><span class="line">        response.setContentType(HttpConstant.CONTENT_TYPE_JSON);</span><br><span class="line">        String json = JSONObject.toJSONString(tResponse);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(json);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String convertFormToString(HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;String, String&gt; result = new HashMap&lt;&gt;(8);</span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class="line">        while (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            String name = parameterNames.nextElement();</span><br><span class="line">            result.put(name, request.getParameter(name));</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            return JSON.toJSONString(result);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String convertInputStreamToString(InputStream inputStream) throws IOException &#123;</span><br><span class="line">        return StreamUtils.copyToString(inputStream, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String decodeApi(StdRequestApi stdRequestApi, String apiPrivateKey) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 1.rsa解密</span><br><span class="line">            // 2.AES验签</span><br><span class="line">            // 3.AES解密</span><br><span class="line">            return deData;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回信息给客户端</span><br><span class="line">     *</span><br><span class="line">     * @param response</span><br><span class="line">     * @param out</span><br><span class="line">     * @param tResponse</span><br><span class="line">     */</span><br><span class="line">    private void responseResult(HttpServletResponse response, PrintWriter out, TResponse tResponse) &#123;</span><br><span class="line">        response.setContentType(HttpConstant.CONTENT_TYPE_JSON);</span><br><span class="line">        String json = JSONObject.toJSONString(tResponse);</span><br><span class="line">        out.print(json);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-5-公钥私钥配置读取"><a href="#3-5-公钥私钥配置读取" class="headerlink" title="3.5.公钥私钥配置读取"></a>3.5.公钥私钥配置读取</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author: bright chen</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;api&quot;)</span><br><span class="line">public class EncryptProperties &#123;</span><br><span class="line">    private String privateKey;</span><br><span class="line">    private String publicKey;</span><br><span class="line"></span><br><span class="line">    public String getPrivateKey() &#123;</span><br><span class="line">        return privateKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrivateKey(String privateKey) &#123;</span><br><span class="line">        this.privateKey = privateKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPublicKey() &#123;</span><br><span class="line">        return publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPublicKey(String publicKey) &#123;</span><br><span class="line">        this.publicKey = publicKey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><em>PS：本文编写于公司产品被黑客入侵后的处理方案之一，具体加密解密逻辑不在本文中讲述</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot实现接口请求日志自动生成(日志自动埋点)</title>
      <link href="/36987.html"/>
      <url>/36987.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-作用："><a href="#1-作用：" class="headerlink" title="1.作用："></a>1.作用：</h2><p>springboot接口请求日志自动生成，实现接口日志自动埋点生成<br>1.统一日志生成格式;—方便查看<br>2.汇总请求参数和请求结果一次性输出日志数据 ，方便查询问题，节省查询请求问题时间；—很直观的日志，前后端问题排查快<br>3.通过日志自动生成减少编写日志时间，减少人力成本；—省编码时间<br>4.记录用户行为轨迹，记录接口时间，为后续风险监控，用户行为统计分析做铺垫；—记录数据</p><h2 id="2-原理："><a href="#2-原理：" class="headerlink" title="2.原理："></a>2.原理：</h2><p>通过面向切面编程的形式，在不影响原有项目的业务（包括加解密）的同时，进行日志埋点</p><p>代码<br>配置模块</p><h2 id="3-代码："><a href="#3-代码：" class="headerlink" title="3.代码："></a>3.代码：</h2><h3 id="3-1-config层"><a href="#3-1-config层" class="headerlink" title="3.1.config层"></a>3.1.config层</h3><p>1.bean类型调度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取spring bean</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class SpringContextAware implements ApplicationContextAware &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Spring应用上下文</span><br><span class="line">     */</span><br><span class="line">    private static ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        SpringContextAware.context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 获取Spring应用上下文</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static ApplicationContext getApplicationContext() &#123;</span><br><span class="line">        return context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取对象</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     * @throws BeansException</span><br><span class="line">     */</span><br><span class="line">    public static Object getBean(String name) throws BeansException &#123;</span><br><span class="line">        return context.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2核心逻辑"><a href="#3-2核心逻辑" class="headerlink" title="3.2核心逻辑"></a>3.2核心逻辑</h3><p>ps：其中的ApiOperation 是swagger的注解，可以自定义注解实现自己的参数配置，<br>这里只是为了方便使用已有的swagger的ApiOperation 注解 的value（接口说明）和notes（接口发布说明）的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * 监控埋点</span><br><span class="line"> * 打印请求和响应信息</span><br><span class="line"> */</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class WebLogAspect &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTokenLoader redisTokenLoader;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private MqProducer mqProducer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 拿到日志对象</span><br><span class="line">    //    slf4j的日志对象</span><br><span class="line">    private final Logger log = LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution( * com.jt.saas..*Controller.*(..))&quot;)</span><br><span class="line">    public void webLog() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取会话中的token去取redis缓存信息</span><br><span class="line">     * 有效期受控于redis.timeout</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    protected LoginInfoVo readLoginInfo(HttpServletRequest request) &#123;</span><br><span class="line">        String token = request.getHeader(HeaderConstant.HEADER_MINI_TOKEN);</span><br><span class="line">        if (token == null) &#123;</span><br><span class="line">            // 非拦截接口的token校验</span><br><span class="line">            String authorization = request.getHeader(HttpConstant.AUTHORIZATION);</span><br><span class="line">            if (authorization != null) &#123;</span><br><span class="line">                if (authorization.length() &gt; 7) &#123;</span><br><span class="line">                    token = authorization.substring(7);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return redisTokenLoader.readToken(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 切点实现</span><br><span class="line">    @Around(&quot;webLog()&quot;)</span><br><span class="line">    public Object doAround(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">        // 记录开始时间</span><br><span class="line">        long start = System.currentTimeMillis();</span><br><span class="line">        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">        ServletRequestAttributes servletRequestAttributes = (ServletRequestAttributes) requestAttributes;</span><br><span class="line">        assert servletRequestAttributes != null;</span><br><span class="line">        HttpServletRequest request = servletRequestAttributes.getRequest();</span><br><span class="line">        LoginInfoVo loginInfo = readLoginInfo(request);</span><br><span class="line">        // 获取方法名</span><br><span class="line">        String className = pjp.getTarget().getClass().getName();</span><br><span class="line">        // 获取执行的方法名称</span><br><span class="line">        String methodName = pjp.getSignature().getName();</span><br><span class="line"></span><br><span class="line">        MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);</span><br><span class="line"></span><br><span class="line">        // 定义返回参数</span><br><span class="line">        Object result = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 获取方法入参</span><br><span class="line">        // Object[] param = pjp.getArgs();</span><br><span class="line">        // String requestBody = convertFormToString(request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 执行目标方法</span><br><span class="line">        result = pjp.proceed();</span><br><span class="line"></span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        String bodyData = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            bodyData = objectMapper.writeValueAsString(result);</span><br><span class="line">        &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JSONObject  param= convertFormToJson(request);</span><br><span class="line"></span><br><span class="line">        LogVo logVo=new LogVo();</span><br><span class="line">        logVo.setUserId(loginInfo != null&amp;&amp;loginInfo.getMemberId()!=null ? loginInfo.getMemberId() : null);</span><br><span class="line">        logVo.setUserName(loginInfo != null&amp;&amp;loginInfo.getNickname2()!=null ? loginInfo.getNickname2() : null);</span><br><span class="line">        logVo.setMobile(loginInfo != null&amp;&amp;loginInfo.getMobile()!=null ? loginInfo.getMobile() : null);</span><br><span class="line">        logVo.setModelName(apiOperation != null&amp;&amp;apiOperation.value()!=null ?apiOperation.value(): null);</span><br><span class="line">        logVo.setRemark(apiOperation != null&amp;&amp;apiOperation.notes()!=null ?apiOperation.notes(): null);</span><br><span class="line">        logVo.setUsedTime(System.currentTimeMillis() - start);</span><br><span class="line">        logVo.setParamData(param);</span><br><span class="line">        logVo.setResultData(bodyData.length() &gt; 2000 ? &quot;数据太大截取2000数据:&quot;+bodyData.substring(0, 2000) :result);</span><br><span class="line">        logVo.setMethodName(className+&quot;.&quot;+methodName);</span><br><span class="line">        logVo.setIp(request.getRemoteAddr());</span><br><span class="line">        logVo.setUrlData(request.getRequestURL().toString());</span><br><span class="line">        // 日志输出</span><br><span class="line">        log.info(&quot;userRequest:&#123;&#125;&quot;,JSON.toJSONString(logVo));</span><br><span class="line">        //每个项目自定义自己的mq去处理自定义日志统计或者分析行为</span><br><span class="line">        mqProducer.sendDelay(&quot;MINI_LOGVO&quot;,JSON.toJSONString(logVo),100);</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private String convertFormToString(HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;String, String&gt; result = new HashMap&lt;&gt;(8);</span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class="line">        while (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            String name = parameterNames.nextElement();</span><br><span class="line">            result.put(name, request.getParameter(name));</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            return JSON.toJSONString(result);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private JSONObject convertFormToJson(HttpServletRequest request) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            JSONObject jsonObject = new JSONObject();</span><br><span class="line">            Enumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class="line">            while (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">                String name = parameterNames.nextElement();</span><br><span class="line">                jsonObject.put(name, request.getParameter(name));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return jsonObject;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-mq层-："><a href="#3-3-mq层-：" class="headerlink" title="3.3 mq层 ："></a>3.3 mq层 ：</h3><p>异步处理日志通用逻辑，使用单例模式实现一个工厂实例，用Spring来获取具体的跟踪服务实现，以此来提供高度解耦和可扩展的服务注册与获取机制去处理指定接口自定义服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TrackingMq &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TrackingCommonService trackingCommonService;</span><br><span class="line">    @RabbitListener(bindings = &#123;@QueueBinding(value = @Queue(value = &quot;MINI_LOGVO&quot;, durable = &quot;true&quot;), exchange =</span><br><span class="line">    @Exchange(value = &quot;saasExchange&quot;, type = &quot;x-delayed-message&quot;), key = &quot;MINI_LOGVO&quot;)&#125;,containerFactory = &quot;firstFactory&quot;)</span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void process(Message message) throws Exception &#123;</span><br><span class="line">        String msg = new String(message.getBody(), &quot;UTF-8&quot;);</span><br><span class="line">        LogVo logVo = JSON.parseObject(msg, LogVo.class);</span><br><span class="line">        //通用的分析功能</span><br><span class="line">        trackingCommonService.commonTracking(logVo);</span><br><span class="line"></span><br><span class="line">        //自定义分析模块》按MethodName执行自定义功能；按需对接口进行自定义处理</span><br><span class="line">        TrackingService trackingService= TrackingFactory.getInstance().get(logVo.getMethodName());</span><br><span class="line">        if(trackingService!=null)&#123;</span><br><span class="line">            trackingService.changeByTrackLog(logVo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4service层："><a href="#3-4service层：" class="headerlink" title="3.4service层："></a>3.4service层：</h3><p>通用处理，自定义处理，单例工厂<br>1.单例工厂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 单例工厂类</span><br><span class="line"> *</span><br><span class="line"> * 追踪日志，触发自定义模块功能</span><br><span class="line"> */</span><br><span class="line">public class TrackingFactory &#123;</span><br><span class="line">    private Map&lt;String, TrackingService&gt; map= new HashMap&lt;&gt;();</span><br><span class="line">    public static class Holder &#123;</span><br><span class="line">        public static TrackingFactory instance = new TrackingFactory();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static TrackingFactory getInstance() &#123;</span><br><span class="line">        return Holder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TrackingService get(String methodName) &#123;</span><br><span class="line">        return map.get(methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TrackingFactory() &#123;</span><br><span class="line">        TrackingService listRankActivityRuleTrackingServiceImpl = (ListRankActivityRuleTrackingServiceImpl) SpringContextAware.getBean(&quot;listRankActivityRuleTrackingServiceImpl&quot;);</span><br><span class="line"></span><br><span class="line">        map.put(&quot;com.jt.saas.mini.controller.activity.ActivityController.listRankActivityRule&quot;, listRankActivityRuleTrackingServiceImpl);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.通用日志处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface TrackingCommonService &#123;</span><br><span class="line">    public void commonTracking(LogVo logVo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class TrackingCommonServiceImpl implements TrackingCommonService&#123;</span><br><span class="line">    private final Logger log = LoggerFactory.getLogger(TrackingCommonServiceImpl.class);</span><br><span class="line">    public void outTimeCount(LogVo logVo)&#123;</span><br><span class="line">        if(logVo.getUsedTime()&gt;1000)&#123;</span><br><span class="line">            log.error(&quot;日志分析：超时1s的接口：&#123;&#125;,&#123;&#125;&quot;,logVo.getModelName(),logVo.getUsedTime());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void commonTracking(LogVo logVo) &#123;</span><br><span class="line">        outTimeCount(logVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.自定义指定接口日志处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface TrackingService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 日志触发自定义内容：数据分析，数据统计，风险监控，发送mq，保存数据入库等等</span><br><span class="line">     * @param logVo</span><br><span class="line">     */</span><br><span class="line">    void changeByTrackLog(LogVo logVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以增加无数个自定义指定接口日志处理实现自己的处理日志方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class ListRankActivityRuleTrackingServiceImpl implements TrackingService &#123;</span><br><span class="line">    private final Logger log = LoggerFactory.getLogger(ListRankActivityRuleTrackingServiceImpl.class);</span><br><span class="line">    private Map&lt;String, Integer&gt; map= new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void changeByTrackLog(LogVo logVo) &#123;</span><br><span class="line">        //发送mq</span><br><span class="line">        //发送kafaka</span><br><span class="line">        //发送数据库</span><br><span class="line">        //统计用户访问次数</span><br><span class="line">        Integer i=map.get(logVo.getMethodName());</span><br><span class="line">        if(i==null)&#123;</span><br><span class="line">            i=1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            i=i+1;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(logVo.getMethodName(), i);</span><br><span class="line"></span><br><span class="line">        log.info(&quot;日志分析:&#123;&#125;:访问次数：&#123;&#125;&quot;,logVo.getModelName(),i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-效果图"><a href="#4-效果图" class="headerlink" title="4.效果图"></a>4.效果图</h2><p><img src="https://www.brightchen.top/picgo/20250107101211389.png" alt="image.png"></p><p><img src="https://www.brightchen.top/picgo/20250107101226157.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 安全 </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustdesk远程桌面使用</title>
      <link href="/43039.html"/>
      <url>/43039.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>为什么使用rustdesk，因为向日葵，todesk，免费版本的有各种各样的坑，比如限制你的登录，需要你重新登录使用，画面模糊，限制你的流量网速等等，还不如自搭rustdesk，安全高且速度只取决于服务端的网速和线下设备的网速。</p><h2 id="1-客户端rustdesk使用"><a href="#1-客户端rustdesk使用" class="headerlink" title="1.客户端rustdesk使用"></a>1.客户端rustdesk使用</h2><p>1.下载 <a href="https://github.com/rustdesk/rustdesk/releases">客户端 rustdesk下载地址</a><br>2.配置<br>配置ID服务器：外网ip:211116<br>配置中继服务器：外网ip:211117<br>key：为rustdesk服务器生成的xxx.pub公钥<br><img src="https://www.brightchen.top/picgo/20250107101017298.png" alt="image.png"></p><h2 id="2-基于-S6-overlay-的镜像-服务端部署"><a href="#2-基于-S6-overlay-的镜像-服务端部署" class="headerlink" title="2.基于 S6-overlay 的镜像 服务端部署"></a>2.基于 S6-overlay 的镜像 服务端部署</h2><p>这些镜像是针对 <code>busybox:stable</code> 构建的，并添加了可执行程序（hbbr 和 hbbs）以及 [S6-overlay<br><a href="https://github.com/rustdesk/rustdesk-server/blob/master/README-ZH.md">服务端下载地址</a></p><p>端口功能解释<br>21115 TCP NAT类型测试，用于确定客户端和服务器之间的网络NAT类型。</p><p>.21116 TCP TCP打洞，用于在受限网络环境下建立P2P连接。<br>21116 UDP 心跳信号和ID服务器。<br>21117 TCP Relay&#x2F;中继服务端口，用于在P2P连接失败时中转数据。<br>ENCRYPTED_ONLY&#x3D;1 需要加密<br>新版ruskdesk部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /var/rustdesk/data</span><br><span class="line">docker run --name rustdesk-server \</span><br><span class="line">  -p 21115:21115 -p 21116:21116 -p 21116:21116/udp \</span><br><span class="line">  -p 21117:21117 -p 21118:21118 -p 21119:21119 \</span><br><span class="line">  -e <span class="string">&quot;RELAY=外网ip:21117&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;ENCRYPTED_ONLY=1&quot;</span> \</span><br><span class="line">  -v <span class="string">&quot;/var/rustdesk/data:/data&quot;</span> -d rustdesk/rustdesk-server-s6:latest</span><br></pre></td></tr></table></figure><p>其中 &#x2F;var&#x2F;rustdesk&#x2F;data 下的文件为密钥参数，删除重启会自动生成新的密钥<br>打印公钥命令，复制做为key使用即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f xxx.pub</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 远程服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rustdesk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mini主机服务器搭建</title>
      <link href="/12826.html"/>
      <url>/12826.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li>主要目的<br>本地设备做成服务器，实现ssh远程登录以及内网穿透</li><li>设备总成本1千多元（其实部分设备可以旧电脑的代替比如固态，内存条，主板，cpu之类的）<br>在此记录稳定运行时间：2024-11-30 08:00~至今</li></ol><table><thead><tr><th align="center">设备</th><th align="center">金额</th></tr></thead><tbody><tr><td align="center">16g ddr4 内存条（笔记本类型的内存条）</td><td align="center">100多元</td></tr><tr><td align="center">1t 固态</td><td align="center">300多元</td></tr><tr><td align="center">极摩客g3</td><td align="center">599元</td></tr><tr><td align="center">网线 一根</td><td align="center">4元</td></tr></tbody></table><ol start="3"><li>本地服务器ubuntu 配置总览<ul><li>安装ssh server 使ubuntu能够被远程登录</li><li>安装docker 方便不同环境项目快速运行</li><li>安装curl 方便请求访问及下载安装</li><li>安装frp客户端，使用内网穿透，方便外网访问（可以使用花生壳，coplar等第三方代替）</li><li>安装docker compose 方便快速部署多个项目</li></ul></li></ol><figure class="highlight plaintext"><figcaption><span>卸载</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><h2 id="1-ubuntu-的ssh-server-安装"><a href="#1-ubuntu-的ssh-server-安装" class="headerlink" title="1.ubuntu 的ssh server 安装"></a>1.ubuntu 的ssh server 安装</h2><p>全称为Secure Shell，是一种网络协议，用于在本地计算机和远程服务器之间建立加密的通信通道</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.更新软件包列表</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.安装open ssh 服务</span></span><br><span class="line"><span class="built_in">sudo</span> apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看状态</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl status ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.设置服务开机启动</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.修改端口（内网穿透时防止端口冲突） 把Port 22改为Port 8022</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.允许防火墙</span></span><br><span class="line"><span class="built_in">sudo</span> ufw allow 8022/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.服务重启</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart ssh</span><br></pre></td></tr></table></figure><h2 id="2-ubuntu-的docker-安装"><a href="#2-ubuntu-的docker-安装" class="headerlink" title="2.ubuntu 的docker 安装"></a>2.ubuntu 的docker 安装</h2><p>Docker是一组平台即服务（PaaS）的产品。它基于操作系统层级的虚拟化技术，将软件与其依赖项打包为容器。</p><p>本次使用官方脚本安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 允许APT使用HTTPS：</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment">#2.添加Docker官方GPG密钥：</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 添加Docker的稳定版本仓库：</span></span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line"><span class="comment"># 4再次更新软件包索引：</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="comment"># 5 安装docker</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.修改docker 镜像源</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">touch</span> /etc/docker/daemon.json</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权问题</span></span><br><span class="line"><span class="built_in">chmod</span> 777 /etc/docker/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入以下</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://mirror.baidubce.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://ccr.ccs.tencentyun.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.1panel.live&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    <span class="string">&quot;log-driver&quot;</span>:<span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">    <span class="string">&quot;log-opts&quot;</span>: &#123;<span class="string">&quot;max-size&quot;</span>:<span class="string">&quot;500m&quot;</span>, <span class="string">&quot;max-file&quot;</span>:<span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.生效及重启docker</span></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像源</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><h2 id="3-ubuntu的curl的安装"><a href="#3-ubuntu的curl的安装" class="headerlink" title="3.ubuntu的curl的安装"></a>3.ubuntu的curl的安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt install curl</span><br><span class="line"><span class="comment"># 2.验证</span></span><br><span class="line">curl --version</span><br></pre></td></tr></table></figure><h2 id="4-ubuntu的frp客户端安装"><a href="#4-ubuntu的frp客户端安装" class="headerlink" title="4.ubuntu的frp客户端安装"></a>4.ubuntu的frp客户端安装</h2><ol><li>可以使用如花生壳，cploar等第三方内网穿透工具代替，但受限于第三方的外网服务器</li><li>frp是开源内网穿透工具，服务端和客户端都需要搭建，安全性最高，但需要自己的外网服务器</li><li>frpc.ini配置已升级为frpc.toml</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看本地内网ip</span></span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建映射目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/frp</span><br><span class="line"><span class="built_in">touch</span> /var/frp/frpc.toml</span><br><span class="line">vim /var/frp/frpc.toml</span><br><span class="line"><span class="built_in">chmod</span> a+x /var/frp/frpc.toml</span><br><span class="line"><span class="comment"># 3.frpc 运行</span></span><br><span class="line">docker run --restart=always --network host -d -v /var/frp/frpc.toml:/etc/frp/frpc.toml --name frpc snowdreamtech/frpc </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.frpc.toml 内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server_addr = &quot;公网ip&quot;#公网ip</span><br><span class="line">server_port = 7000 # </span><br><span class="line">auth_token = &quot;123456&quot; # token 没有不用设置</span><br><span class="line"> </span><br><span class="line">[web]</span><br><span class="line">name = &quot;web&quot; # 名字自定义</span><br><span class="line">type = &quot;http&quot; # 协议类型</span><br><span class="line">localIP = &quot;127.0.0.1&quot; # 本地127.0.0.1，或者内网的ip地址</span><br><span class="line">localPort = 8080  # http服务的端口</span><br><span class="line">customDomains = [&quot;域名或公网ip地址&quot;] # 域名or公网ip</span><br><span class="line"> </span><br><span class="line">[ssh]</span><br><span class="line">type = &quot;tcp&quot; # ssh属于tcp</span><br><span class="line">localIP = &quot;127.0.0.1&quot; # 本地127.0.0.1，或者内网的ip地址</span><br><span class="line">localPort = 8022 # 本地服务端口</span><br><span class="line">remotePort = 8022 #外网映射端口</span><br></pre></td></tr></table></figure><h2 id="5-ubuntu的docker-compose安装"><a href="#5-ubuntu的docker-compose安装" class="headerlink" title="5.ubuntu的docker compose安装"></a>5.ubuntu的docker compose安装</h2><p>Docker-Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Docker Compose</span></span><br><span class="line"><span class="comment"># 查看最新版本https://github.com/docker/compose/releases</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install -y docker-compose</span><br><span class="line">docker-compose --version</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node和python多版本控制</title>
      <link href="/20077.html"/>
      <url>/20077.html</url>
      
        <content type="html"><![CDATA[<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>作用：为node.js多版本切换工具<br>地址：<a href="https://github.com/coreybutler/nvm-windows/releases">下载地址</a></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>注意node.js的path配置（自动安装时配置，zip包需要手动配置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NVM_HOME D:\tools\nvm</span><br><span class="line">NVM_SYMLINK D:\tools\nvm\自定义目录</span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.查看版本</span><br><span class="line">nvm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.查看列表</span><br><span class="line">nvm list available</span><br><span class="line"></span><br><span class="line">3.安装版本</span><br><span class="line">nvm install 版本</span><br><span class="line"></span><br><span class="line">4.使用版本</span><br><span class="line">nvm use 版本</span><br><span class="line"></span><br><span class="line">5.卸载版本</span><br><span class="line">nvm uninstall 版本</span><br><span class="line"></span><br><span class="line">6.默认全局版本</span><br><span class="line">nvm alias default &lt;version&gt;</span><br><span class="line"></span><br><span class="line">7.查看版本</span><br><span class="line">node -V</span><br><span class="line"></span><br><span class="line">8.查看列表</span><br><span class="line">nvm list</span><br></pre></td></tr></table></figure><h2 id="pyenv-win"><a href="#pyenv-win" class="headerlink" title="pyenv-win"></a>pyenv-win</h2><p>作用：为python在win下的多版本切换工具<br>地址：<a href="https://github.com/pyenv-win/pyenv-win">下载地址</a></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1.需要在git上下载，然后windows 配置环境变量PATH<br>2.window注意需要先卸载已单独安装的python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.xxx\pyenv-win-master\pyenv-win\bin</span><br><span class="line">2.xxx\pyenv-win-master\pyenv-win\shims</span><br></pre></td></tr></table></figure><p>3.无法成功切换python版本问题，导致cmd 输入python直接打开商店</p><p>（win 11特别注意）在桌面搜索找到”管理应用别名“，然后把python相关的禁用掉即可</p><p><img src="https://www.brightchen.top/picgo/20250107100940146.png" alt="image.png"></p><p>4.替换下载源<br>PYTHON_BUILD_MIRROR_URL&#x3D;<a href="https://mirrors.huaweicloud.com/python/">https://mirrors.huaweicloud.com/python/</a></p><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.查看版本</span><br><span class="line">pyenv --version</span><br><span class="line"></span><br><span class="line">2.可安装</span><br><span class="line">pyenv install --list</span><br><span class="line"></span><br><span class="line">3.可使用</span><br><span class="line">pyenv versions</span><br><span class="line"></span><br><span class="line">4.当前版本</span><br><span class="line">pyenv version</span><br><span class="line"></span><br><span class="line">5.安装指定版本</span><br><span class="line">pyenv install &lt;version&gt;</span><br><span class="line"></span><br><span class="line">6.卸载指定版本</span><br><span class="line">pyenv uninstall &lt;version&gt;</span><br><span class="line"></span><br><span class="line">7.设置当前文件夹下版本</span><br><span class="line">pyenv local &lt;version&gt;</span><br><span class="line"></span><br><span class="line">8.设置全局版本</span><br><span class="line">pyenv global &lt;version&gt;</span><br><span class="line"></span><br><span class="line">9.查看版本</span><br><span class="line">python -V</span><br></pre></td></tr></table></figure><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>修改pip缓存位置，默认在C盘会导致空间不足</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip cache dir</span><br><span class="line">pip config set global.cache-dir &quot;D:\pipCache&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 语言版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付宝自动续费设计</title>
      <link href="/19777.html"/>
      <url>/19777.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-参考文档："><a href="#一-参考文档：" class="headerlink" title="一. 参考文档："></a>一. 参考文档：</h2><p><a href="https://opendocs.alipay.com/open/repo-0243dw">支付宝自动续费参考地址</a></p><h2 id="二-流程设计"><a href="#二-流程设计" class="headerlink" title="二. 流程设计"></a>二. 流程设计</h2><h3 id="1-自动续费时序图"><a href="#1-自动续费时序图" class="headerlink" title="1. 自动续费时序图"></a>1. 自动续费时序图</h3><pre class="mermaid">sequenceDiagram   participant 用户   participant 小程序   participant 后端服务   participant 支付宝   用户->>小程序:1.请求续约   小程序->>后端服务:2.请求签约接口   后端服务->>支付宝:3.支付宝个人协议页面签约接口   支付宝->>后端服务:4.返回签约参数   后端服务->>小程序:5.返回签约参数   小程序->>用户:6.弹出签约跳转   用户->>支付宝:7.签约   支付宝->>后端服务:8.签约/解约通知   用户->>小程序:9.解除签约   小程序->>后端服务:10.解除签约   后端服务->>支付宝:11.解约接口   支付宝->>后端服务:12.签约/解约通知   后端服务->>支付宝:13.定时规则任务触发:周期扣款   支付宝->>后端服务:14.扣款回调   后端服务->>支付宝:15.退款   后端服务->>支付宝:16.(主动)查询退款   后端服务->>支付宝:17.查询扣款订单异常进行撤销接口（12小时）</pre><hr><h3 id="2-接口相关"><a href="#2-接口相关" class="headerlink" title="2. 接口相关"></a>2. 接口相关</h3><ol><li><a href="https://opendocs.alipay.com/open/8bccfa0b_alipay.user.agreement.page.sign">alipay.user.agreement.page.sign（支付宝个 人协议页面签约接口）</a></li><li><a href="https://opendocs.alipay.com/support/01rg2a">签约&#x2F;解约通知(周期&#x2F;商家扣款如何设置异步通知)</a></li><li><a href="https://opendocs.alipay.com/open/b841da1f_alipay.user.agreement.unsign?scene=common&pathHash=6d2d4910">解约接口</a></li><li><a href="https://opendocs.alipay.com/open/38d751b1_alipay.trade.pay?scene=b4d9c9906e14451b99c8de390ae20fea&pathHash=0a98c4e0">签约扣款接口</a></li><li><a href="https://opendocs.alipay.com/open/de34d4fa_alipay.trade.refund?scene=common&pathHash=46ea3fea">签约退款接口</a></li><li><a href="https://opendocs.alipay.com/support/01rg2a">扣款回调&#x2F;通知</a> ,<a href="https://opendocs.alipay.com/open/38d751b1_alipay.trade.pay?scene=b4d9c9906e14451b99c8de390ae20fea&pathHash=0a98c4e0#%E8%A7%A6%E5%8F%91%E9%80%9A%E7%9F%A5%E7%B1%BB%E5%9E%8B">触发通知示例</a></li><li><a href="https://opendocs.alipay.com/open/02ekft">查询退款</a></li><li><a href="https://opendocs.alipay.com/open/83a5f6d3_alipay.trade.cancel?scene=common&pathHash=f27672eb">撤销接口</a></li><li><a href="https://opendocs.alipay.com/open/07005f5c_alipay.trade.query?scene=common&pathHash=aa8ed91c">查询扣款接口</a></li></ol><p>&#x3D;&#x3D;备注：需要注意扣款订单和退款订单的订单号规则，防止与内部系统其他类型订单冲突&#x3D;&#x3D;</p><h2 id="三-注意事项"><a href="#三-注意事项" class="headerlink" title="三. 注意事项"></a>三. 注意事项</h2><h3 id="1-产品特色"><a href="#1-产品特色" class="headerlink" title="1. 产品特色"></a>1. 产品特色</h3><p><strong>商家扣款</strong> 是商家引导用户进行签约授权，签约成功后商家根据签约协议号，再主动调接口完成扣款的支付产品，支持周期性的扣款模式。</p><p>商家选择接入<strong>商家扣款</strong> 产品，可同时选择接入 <strong>商家分账</strong> 产品，具体查看 <a href="https://opendocs.alipay.com/open/repo-0038ln?ref=api">商家分账产品介绍</a>。</p><p>目前 <strong>商家扣款</strong> 一个用户在同商家同场景码下&#x3D;&#x3D;最多可以签约 1 次&#x3D;&#x3D;，可以设置多个模版，每个模版对应一个场景码；到&#x3D;&#x3D;扣款日 execute_time 的前 5 天&#x3D;&#x3D;商家可以根据用户签约协议号完成扣款；单个商家对单个协议的扣款限额为&#x3D;&#x3D;单笔限额 100 元。&#x3D;&#x3D;</p><ul><li>产品业务特征：固定周期、固定金额范围、被动扣款等。</li><li>产品典型场景：会员包月、租赁费用、定期还款、充值缴费等。</li></ul><p>目前允许商家在约定日期之前 5 天开始扣款，如扣款时间 2019-11-06，可从 11-01 到 11-06 调用扣款接口。</p><h3 id="2-注意"><a href="#2-注意" class="headerlink" title="2. 注意"></a>2. 注意</h3><p>为保障用户体验，扣费操作不可在晚上执行，请于&#x3D;&#x3D;北京时间 <strong>7:00～22:00</strong> 期间发起扣款。&#x3D;&#x3D;</p><h3 id="3-签约规则参数"><a href="#3-签约规则参数" class="headerlink" title="3.  签约规则参数"></a>3.  签约规则参数</h3><p>为实现周期性业务逻辑，商家发起签约请求主要遵循以下参数规则。</p><p>&#x3D;&#x3D;涉及接口 <a href="https://opendocs.alipay.com/open/8bccfa0b_alipay.user.agreement.page.sign">alipay.user.agreement.page.sign（支付宝个人协议页面签约接口）</a>、<a href="https://opendocs.alipay.com/open/e65d4f60_alipay.trade.app.pay?pathHash=125bc1aa">alipay.trade.app.pay（app支付接口2.0）</a> 等。&#x3D;&#x3D;</p><table><thead><tr><th><strong>规则主要控制逻辑</strong></th><th><strong>涉及参数</strong></th><th><strong>必填</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>单次扣款最大金额</td><td>single_amount</td><td>是</td><td>每次发起扣款时限制的最大金额，单位为元。商家每次发起扣款都不允许大于此金额。</td></tr><tr><td>周期类型</td><td>period_type</td><td>是</td><td>枚举值为 DAY 和 MONTH。<br><br>DAY 即扣款周期按天计，MONTH 代表扣款周期按自然月。</td></tr><tr><td>周期间隔时间</td><td>period,period_type</td><td>是</td><td>与另一参数 period_type 组合使用确定扣款周期，例如 period_type 为 DAY，period&#x3D;90，则扣款周期为90 天。</td></tr><tr><td>首次扣款时间</td><td>execute_time</td><td>是</td><td>商家发起首次扣款的时间。精确到日，格式为 yyyy-MM-dd。<br><br>结合其它必填的扣款周期参数，会确定商家以后的扣款计划。发起扣款的时间需符合这里的扣款计划。</td></tr><tr><td>周期总金额</td><td>total_amount</td><td>否</td><td>单位为元。如果传入此参数，商家多次扣款的累计金额不允许超过此金额。</td></tr><tr><td>周期总期数</td><td>total_payments</td><td>否</td><td>如果传入此参数，则商家成功扣款的次数不能超过此次数限制（扣款失败不计入）。</td></tr></tbody></table><p><img src="https://www.brightchen.top/picgo/20250107101107101.png" alt="image.png"></p><h3 id="4-扣款（-原退款接口-）"><a href="#4-扣款（-原退款接口-）" class="headerlink" title="4. 扣款（ (原退款接口)）"></a>4. 扣款（ (原退款接口)）</h3><p>为实现周期性业务逻辑，商家发起扣款请求主要遵循以下参数规则。</p><p>&#x3D;&#x3D;涉及接口 <a href="https://opendocs.alipay.com/open/38d751b1_alipay.trade.pay?scene=32&pathHash=0a222003">alipay.trade.pay(统一收单交易支付接口)</a> 等。&#x3D;&#x3D;</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>扣款主要控制逻辑</strong></td><td><strong>描述</strong></td></tr><tr><td>扣款金额</td><td>后续每期扣款金额必须小于等于签约约定金额。</td></tr><tr><td>扣款时间</td><td>&#x3D;&#x3D;扣款必须在约定时间及约定时间前 5天内发起，如果周期间隔时间为自然月，扣款时间只能在（1-28 号）。&#x3D;&#x3D;</td></tr><tr><td>扣款时间间隔</td><td>周期内只能有一次扣款，上期未扣款不会叠加到下期；当期内若用户错过扣款日期可以调用 <a href="https://opendocs.alipay.com/open/ed428330_alipay.user.agreement.executionplan.modify?scene=common&pathHash=13c30e39">alipay.user.agreement.executionplan.modify</a> （周期性扣款协议执行计划修改接口）延后扣款时间。</td></tr><tr><td>撤销及退款逻辑</td><td>交易撤销后，当期内还可以发起一次扣款，交易退款则不允许再次发起扣款。</td></tr><tr><td>周期总金额和总期数</td><td>如果签约时传入该信息，则扣款时会校验总扣款金额和期数是否满足条件。</td></tr><tr><td>下次扣款时间</td><td>下次扣款时间可以修改，只能往后延期。如果扣款周期类型为天，则无限制；如果扣款周期为自然月，只能延期到（1-28 号）。</td></tr></tbody></table><h3 id="5-费率"><a href="#5-费率" class="headerlink" title="5. 费率"></a>5. 费率</h3><p>具体以开通产品时的约定为准，常规计费模式如下</p><table><thead><tr><th align="center"><strong>服务名称</strong></th><th align="center"><strong>费率</strong></th></tr></thead><tbody><tr><td align="center">单笔费率</td><td align="center">0.6%～1%</td></tr></tbody></table><h3 id="6-退款-原退款接口"><a href="#6-退款-原退款接口" class="headerlink" title="6.退款 (原退款接口)"></a>6.退款 (原退款接口)</h3><p>退款周期：12 个月，即交易发生后 12 个月内可发起退款，&#x3D;&#x3D;超过12 个月则不可发起退款&#x3D;&#x3D;。</p><p>退款方式：资金原路返回用户账户。</p><p>退款退费：退款时手续费会一并退还。</p><h3 id="7-签约解约返回"><a href="#7-签约解约返回" class="headerlink" title="7.签约解约返回"></a>7.签约解约返回</h3><h4 id="7-1-区分支付返回异步和签约返回异步"><a href="#7-1-区分支付返回异步和签约返回异步" class="headerlink" title="7.1  区分支付返回异步和签约返回异步"></a>7.1  区分支付返回异步和签约返回异步</h4><p>支付接口返回的异步参数和签约返回的异步参数是不一样的。</p><ul><li>支付返回异步含有 out_trade_no、trade_no。</li><li>签约返回异步含有 external_agreement_no、agreement_no。</li></ul><p><strong>注意：</strong>请求时设置 external_agreement_no，异步必传。</p><h4 id="7-2-区分签约返回异步和解约返回异步"><a href="#7-2-区分签约返回异步和解约返回异步" class="headerlink" title="7.2 区分签约返回异步和解约返回异步"></a>7.2 区分签约返回异步和解约返回异步</h4><p>签约返回异步和解约返回异步可以根据 status 判断</p><ul><li>签约返回异步含有status&#x3D;NORMAL，notify_type&#x3D;dut_user_sign。</li><li>解约返回异步含有status&#x3D;UNSIGN，notify_type&#x3D;dut_user_unsign。</li></ul><h2 id="四-表设计"><a href="#四-表设计" class="headerlink" title="四.表设计"></a>四.表设计</h2><h3 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h3><pre><code>签约： signing of contract；make a contract扣款订单号：30位=前缀缩写 mac（3位）+运营商编号（9位）+时间戳（13）+5位随机数退款订单号：30位=前缀缩写 rmac（4位）+运营商编号（9位）+时间戳（13）+4位随机数签约号：uuid超级会员购买表：xxx_order                1. external_agreement_no 签约号                2. 扣款订单号                超级会员退款表：xxx_refund_order                1. external_agreement_no 签约号                2. 扣款订单号                3. 退款订单号                 用户签约表：xxx_agreement_record，            1. external_agreement_no 签约号             2. status 0 未签约，1已签约，2，已失效             3. 续期时间 . d：天 2. m：（30，90，年）</code></pre><h3 id="2-类图"><a href="#2-类图" class="headerlink" title="2. 类图"></a>2. 类图</h3><pre class="mermaid">classDiagram    xxx_agreement_record -- xxx_order:签约号    xxx_agreement_record -- xxx_refund_order:签约号   xxx_order --  xxx_refund_order:扣款订单号    class xxx_agreement_record{         签约表         external_agreement_no 签约号         status 状态         agreement_date 签约时间    }   class xxx_order{         购买表         external_agreement_no 签约号         扣款订单号    }    class xxx_refund_order{         退款表         external_agreement_no 签约号         扣款订单号         退款订单号    }</pre><script src="https://unpkg.com/mermaid@10.9.1/dist/mermaid.min.js" async></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 支付宝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动续费 </tag>
            
            <tag> 支付宝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openJdk21镜像打包制作</title>
      <link href="/43370.html"/>
      <url>/43370.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-目的："><a href="#一-目的：" class="headerlink" title="一.目的："></a>一.目的：</h2><p>制作基于openjdk21的基础镜像，方便后续使用<br>内容：<br>1.使用的是Debian 11 slim 作为基础镜像（在此感谢no name大佬提醒我alpine做为基础镜像不稳定的问题）<br>2.使用adoptium的OpenJDK21U-jre_x64_linux_hotspot_21.0.4_7.tar.gz 做为环境</p><p>打包后的镜像大小在319MB</p><h2 id="二-dockerfile-代码"><a href="#二-dockerfile-代码" class="headerlink" title="二.dockerfile 代码"></a>二.dockerfile 代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 使用 Debian 11 slim 作为基础镜像</span><br><span class="line">FROM debian:11-slim</span><br><span class="line"></span><br><span class="line"># 设置环境变量</span><br><span class="line">ENV jdk=OpenJDK21U-jre_x64_linux_hotspot_21.0.4_7.tar.gz</span><br><span class="line">MAINTAINER bright &quot;1024347104@qq.com&quot;</span><br><span class="line"></span><br><span class="line"># 配置镜像源</span><br><span class="line">RUN sed -i &#x27;s/deb.debian.org/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"># 更新软件包索引并安装必要的工具和依赖</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">    locales \</span><br><span class="line">    tzdata \</span><br><span class="line">    fontconfig \</span><br><span class="line">    libfontconfig1 \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"># 生成并设置中文 locale</span><br><span class="line">RUN echo &quot;zh_CN.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.gen \</span><br><span class="line">    &amp;&amp; locale-gen \</span><br><span class="line">    &amp;&amp; echo &quot;LANG=zh_CN.UTF-8&quot; &gt; /etc/default/locale</span><br><span class="line"></span><br><span class="line"># 设置时区</span><br><span class="line">RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class="line"></span><br><span class="line"># 添加 JDK 文件</span><br><span class="line"># JDK 文件可以从 https://adoptium.net/zh-CN/temurin/releases/ 下载</span><br><span class="line">COPY $jdk /usr/local/</span><br><span class="line">RUN tar -xzf /usr/local/$jdk -C /usr/local/ &amp;&amp; rm /usr/local/$jdk</span><br><span class="line"></span><br><span class="line"># 设置环境变量</span><br><span class="line">ENV JAVA_HOME=/usr/local/jdk-21.0.4+7-jre</span><br><span class="line">ENV PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"># 设置 Java 字符编码环境变量</span><br><span class="line">ENV JAVA_TOOL_OPTIONS=&quot;-Dfile.encoding=UTF8&quot;</span><br></pre></td></tr></table></figure><h2 id="三-调试"><a href="#三-调试" class="headerlink" title="三.调试"></a>三.调试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#生成镜像</span><br><span class="line">docker build -t 1024347104/jdk21 .</span><br><span class="line">#测试镜像</span><br><span class="line">docker run --rm -it --name test 1024347104/jdk21</span><br><span class="line">#进入临时镜像测试是否成功</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="四-效果图"><a href="#四-效果图" class="headerlink" title="四.效果图"></a>四.效果图</h2><p>1.运行效果图<br><img src="https://www.brightchen.top/picgo/20250107100821697.png" alt="image.png"></p><p>2.查看dokcer镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 1024347104/jdk21:latest </span><br></pre></td></tr></table></figure><p><img src="https://www.brightchen.top/picgo/20250107100851594.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
